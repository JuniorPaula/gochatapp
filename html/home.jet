<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <title>Golang Chatapp</title>

    <style>
        body {
            background-color: #eeeeee;
        }

        ul {
            list-style-type: none;
            padding-left: 0;
        }

        .online_users {
            background-color: #fff;
            padding: 10px;
        }

        .online_users h3 {
            text-align: center;
            font-size: 1.5rem;
            font-weight: 600;
        }

        #online_users li {
            padding: 5px 0;
            font-size: 1.2rem;
            font-weight: 600;
        }

        input[type="text"] {
            border-radius: 0;
            outline: none;
            margin-bottom: 10px;
        }

        input[type="text"]:focus {
            outline: 0 !important;
            border-color: #007bff;
        }

        .chatbox {
            border: 1px solid #ccc;
            background-color: #fff;
            height: 400px;
            overflow-y: scroll;
            padding: 5px 10px;
        }

        .chatbox::-webkit-scrollbar {
            width: 0.5em;
        }

        .chatbox::-webkit-scrollbar-track {
            background-color: #4c92dd;
        }

        .chatbox::-webkit-scrollbar-thumb {
            background-color: #888;
        }

        .chatbox::-webkit-scrollbar-thumb:hover {
            background-color: #555;
        }

        .chatbox p {
            margin-bottom: 0;
        }

        .chatbox p span {
            font-weight: bold;
        }

        .chatbox p span.username {
            color: #007bff;
        }

        .chatbox p span.message {
            color: #28a745;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3 text-center text-primary">Go<strong class="text-black">Chat</strong>App</h1>
            </div>
        </div>
        <hr>
        <div class="row mt-3">
            <div class="col-md-8">
                <h3>Chat</h3>

                <div class="form-group">
                    <label for="usename">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-group">
                    <label for="message">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>

                <input type="hidden" name="action" id="action">
                <div class="my-3">
                    <a href="javascript:void(0);" class="btn btn-sm btn-secondary" id="sendBtn">Send Message</a>
                    <span id="status" class="mt-2 float-end"></span>
                </div>

                <div id="output" class="chatbox">

                </div>
            </div>
            <div class="col-md-4 online_users">
                <h3>Who's online</h3>

                <ul id="online_users"></ul>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
    crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
    integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>

<script>
    let socket = null;
    let outputChatbox = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = function () {
        console.log("Living");

        let jsonData = {}
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function () {
        socket = new ReconnectingWebSocket("ws://localhost:4000/ws", null, { debug: true, reconnectInterval: 3000 });

        const offline = `<span class="badge bg-danger">Offline</span>`;
        const online = `<span class="badge bg-success">Online</span>`;
        let statusDiv = document.getElementById("status");

        socket.onopen = (e) => {
            console.log("Connection established");
            statusDiv.innerHTML = online;
        }

        socket.onclose = (e) => {
            console.log("Connection closed");
            statusDiv.innerHTML = offline;
        }

        socket.onerror = (e) => {
            console.log("Error occured");
            statusDiv.innerHTML = offline;
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            console.log("Action is", data.action);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) {
                        ul.removeChild(ul.firstChild);
                    }

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(user => {
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(user));
                            ul.appendChild(li);
                        });
                    }
                    break;

                case "broadcast":
                    outputChatbox.innerHTML = outputChatbox.innerHTML + data.message;
                    break;
            }
        }

        userField.addEventListener("change", function () {
            let jsonData = {};
            jsonData["username"] = this.value;
            jsonData["action"] = "username";

            socket.send(JSON.stringify(jsonData));
        });

        messageField.addEventListener("keydown", function (event) {
            if (event.keyCode === 13) {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }

                if ((userField.value == "") || (messageField.value == "")) {
                    errorMessage("Please fill in the username and message fields!");
                    return false;
                } else {
                    sendMessage();
                }

                event.preventDefault();
                event.stopPropagation();
            }
        });

        document.getElementById("sendBtn").addEventListener("click", function () {
            if ((userField.value == "") || (messageField.value == "")) {
                errorMessage("Please fill in the username and message fields!");
                return false;
            } else {
                sendMessage();
            }
        });
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;

        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: "error",
            text: msg,
            time: 2
        });
    }
</script>

</html>