<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

    <title>Golang Chatapp</title>

    <style>
        input[type="text"] {
            border-radius: 0;
            outline: none;
            margin-bottom: 10px;
        }

        input[type="text"]:focus {
            outline: 0 !important;
            border-color: #007bff;
        }

        .chatbox {
            height: 400px;
            overflow-y: scroll;
        }

        .chatbox::-webkit-scrollbar {
            width: 0.5em;
        }

        .chatbox::-webkit-scrollbar-track {
            background-color: #f1f1f1;
        }

        .chatbox::-webkit-scrollbar-thumb {
            background-color: #888;
        }

        .chatbox::-webkit-scrollbar-thumb:hover {
            background-color: #555;
        }

        .chatbox p {
            margin-bottom: 0;
        }

        .chatbox p span {
            font-weight: bold;
        }

        .chatbox p span.username {
            color: #007bff;
        }

        .chatbox p span.message {
            color: #28a745;
        }

        .chatbox p span.message {
            color: #28a745;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="my-3 text-center">This is the <strong>Home</strong> page</h1>
            </div>
        </div>
        <hr>
        <div class="row mt-4">
            <div class="col-md-8">
                <h3>Chat</h3>

                <p>
                    <a href="https://github.com">Go to Github</a>
                </p>

                <div class="form-group">
                    <label for="usename">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-group">
                    <label for="message">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>

                <hr>
                <a href="javascript:void(0);" class="btn btn-sm btn-secondary" id="sendBtn">Send Message</a>

                <input type="hidden" name="action" id="action">

                <hr>

                <div id="output" class="chatbox">

                </div>
            </div>
            <div class="col-md-4">
                <h3>Who's online</h3>

                <ul id="online_users"></ul>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
    crossorigin="anonymous"></script>

<script>
    let socket = null;
    let outputChatbox = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = function () {
        console.log("Living");

        let jsonData = {}
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function () {
        socket = new WebSocket("ws://localhost:4000/ws");

        socket.onopen = (e) => {
            console.log("Connection established");
        }

        socket.onclose = (e) => {
            console.log("Connection closed");
        }

        socket.onerror = (e) => {
            console.log("Error occured");
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            console.log("Action is", data.action);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) {
                        ul.removeChild(ul.firstChild);
                    }

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(user => {
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(user));
                            ul.appendChild(li);
                        });
                    }
                    break;

                case "broadcast":
                    outputChatbox.innerHTML = outputChatbox.innerHTML + data.message + "<br />";
                    break;
            }
        }

        let userInput = document.getElementById("username");
        userInput.addEventListener("change", function () {
            let jsonData = {};
            jsonData["username"] = this.value;
            jsonData["action"] = "username";

            socket.send(JSON.stringify(jsonData));
        });

        document.getElementById("message").addEventListener("keydown", function (event) {
            if (event.keyCode === 13) {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }
        
                if ((userField.value == "") || (messageField.value == "")) {
                    alert("Please fill in the username and message fields");
                    return false;
                } else {
                    sendMessage();
                }

                event.preventDefault();
                event.stopPropagation();

                sendMessage();
            }
        });

        document.getElementById("sendBtn").addEventListener("click", function () {
            if ((userField.value == "") || (messageField.value == "")) {
                alert("Please fill in the username and message fields");
                return false;
            } else {
                sendMessage();
            }
        });
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = document.getElementById("username").value;
        jsonData["message"] = document.getElementById("message").value;

        socket.send(JSON.stringify(jsonData));
        document.getElementById("message").value = "";
    }
</script>

</html>